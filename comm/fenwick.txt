 int merge(int arr[], int l, int m, int r, unordered_map<int, int> &hm) 
{
        int i, j, k;
        int n1 = m - l + 1;
        int n2 = r - m;

        /* create temp arrays */
        int L[n1], R[n2];

        /* Copy data to temp arrays L[] and R[] */
        for (i = 0; i < n1; i++) L[i] = arr[l + i];

        for (j = 0; j < n2; j++) R[j] = arr[m + 1 + j];

        /* Merge the temp arrays back into arr[l..r]*/
        i = 0, j = 0, k = l;
        int c = 0;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                // increment inversion count of L[i]
                hm[L[i]] += c;
                arr[k++] = L[i++];
            } else {
                arr[k++] = R[j++];

                // inversion found
                c++;
            }
        }

        /* Copy the remaining elements of L[], if
        there are any */
        while (i < n1) {
            hm[L[i]] += c;
            arr[k++] = L[i++];
        }

        /* Copy the remaining elements of R[], if
        there are any */
        while (j < n2) arr[k++] = R[j++];
    }

    /* l is for left index and r is right index of
    the sub-array of arr to be sorted */
    int mergeSort(int arr[], int l, int r, unordered_map<int, int> &hm) 
    {
        if (l < r) {
            int m = l + (r - l) / 2;
            mergeSort(arr, l, m, hm);
            mergeSort(arr, m + 1, r, hm);
            merge(arr, l, m, r, hm);
        }
    }

    vector<int> findSurpasser(int arr[], int n) {
        // To store inversion count for elements
        unordered_map<int, int> hm;

        // To store copy of array
        int dup[n];
        memcpy(dup, arr, n * sizeof(arr[0]));

        // Sort the copy and store inversion count
        // for each element.
        mergeSort(dup, 0, n - 1, hm);
        vector<int> surpasser(n);
        for (int i = 0; i < n; i++) surpasser[i] = (n - 1) - i - hm[arr[i]];
        return surpasser;